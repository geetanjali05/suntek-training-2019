#include<stdio.h>
int revofnum( int num)
{
int rev=0,n;
while(num!=0)
{
n=num%10;
rev=rev*10+n;
num=num/10;
}
return rev;
}

int main()
{
int reve,num;
printf("enter num");
scanf("%d",&num);
reve=revofnum(num);
printf("%d",reve);
return(0);
}

#include<stdio.h>
#include<stdlib.h>
#include<string.h>
void find(char str[80],char search[10]);
void main()
{
  char str[80], search[10];
  int i;
    scanf("%s",str);
    scanf("%s",search);

    find(str,search);
}
void find(char str[80],char search[10])
{

    int count1 = 0, count2 = 0, i, j, flag;

    while (str[count1] != '\0')
        count1++;
    while (search[count2] != '\0')
        count2++;
    for (i = 0; i <= count1 - count2; i++)
    {
        for (j = i; j < i + count2; j++)
        {
            flag = 1;
            if (str[j] != search[j - i])
            {
                flag = 0;
                break;
            }
        }
        if (flag == 1)
            break;
    }
    if (flag == 1)
        printf("present");
    else
        printf("not present");


}

#include <stdio.h>
int cross(int N);

void main()
    {
       int  n;

    scanf("%d", &n);
    cross(n);
    }

int cross(int N)
{
    int i,j;
    for(i=1; i<=N; i++)
    {
        for(j=1; j<=N; j++)
        {
            if(i==1 || i==N || j==1 || j==N || i==j || j==(N - i + 1))
            {
                printf("*");
            }
            else
            {
                printf(" ");
            }
        }
        printf("\n");
    }
    return 0;
}

#include<stdio.h>
int main()
{
    int r, i, j, space;

    scanf("%d",&r);
    for(i=r; i>=1; --i)
    {
        for(space=0; space < r-i; ++space)
            printf("  ");
        for(j=i; j <= 2*i-1; ++j)
            printf("* ");
        for(j=0; j < i-1; ++j)
            printf("* ");
        printf("\n");
    }
    return 0;
}

#include <stdio.h>
/*print pattern triangle*/
int main()
{
    int i, space, rows, k=0;
    scanf("%d",&rows);
    for(i=1; i<=rows; ++i, k=0)
    {
        for(space=1; space<=rows-i; ++space)
        {
            printf("  ");
        }
        while(k != 2*i-1)
        {
            printf("* ");
            ++k;
        }
        printf("\n");
    }

    return 0;
}

/* Print Table for N*/
#include <stdio.h>
int printtable(int n);
int main() {
	int n;
	scanf("%d",&n);
	printtable(n);
		return 0;
}

int printtable(int n)
{
    for(int i=1;i<11;i++)
    printf("%d * %d = %d\n",n,i,(n*i));
}

#include <stdio.h>
#include <string.h>
int partition(int* a, int low, int high)
{
    int left = low;
    int pivotIdx = low + (high - low)/2;
    int pivot = a[pivotIdx];
    a[pivotIdx] = a[high];
    a[high] = pivot;
    pivotIdx = high;
    int partitionIdx = low;
    while (left < high)
    {
        if (a[left] < pivot)
        {
            int tmp = a[left];
            a[left] = a[partitionIdx];
            a[partitionIdx] = tmp;
            ++partitionIdx;
        }
        ++left;
    }
    a[pivotIdx] = a[partitionIdx];
    a[partitionIdx] = pivot;
    return partitionIdx;
}

int quickselect(int* a, int low, int high, int k)
{
    if (low == high)
        return a[low];
    int pivotIdx = partition(a, low, high);
    int sizeOfLeftSubArray = pivotIdx - low + 1;
    if (sizeOfLeftSubArray > k)
    {
        return quickselect(a, low, pivotIdx-1, k);
    }
    else if (sizeOfLeftSubArray < k)
    {
        return quickselect(a, pivotIdx+1, high, k-sizeOfLeftSubArray);
    }
    else
    {
        return a[pivotIdx];
    }
}
int main()
{
  int n,i;
  scanf("%d",&n);

  int arr[n];
  for(i=0;i<n;i++)
  scanf("%d",&arr[i]);
  int k;
  //printf("\nEnter the number 'k' to find the 'kth' largest element: ");
  scanf("%d", &k);
  printf("\nKth largest element is %d", quickselect(arr, 0, n-1, k));
  return 0;
}

#include<stdio.h>
int  occurnce(array,size,number)
{
    int i;
    for(i=0;i<size;i++)
{
if(a[i]==num)
count++;
}
if(count!=0)
printf("number %d has occured %d times",n1,count);
else
printf("no element fount");
return '1'- 48;
}
int main()
{
int i,a[10],count=0,n1,n;
printf("enter the size of the array");
scanf("%d",&n);
for(i=0;i<n;i++)
{
scanf("%d",&a[i]);
}
printf("enter element to search");
scanf("%d",&n1);
occurnce(a,n,n1);
}



#include<stdio.h>
void occofall(aray,size)
{
    int i,j,count;
    for(i=0;i<size;i++)
{
    count=0;
for(j=i;j<size;j++)
{
if(aray[i]==aray[j])
count++;
}
if(size!=0)
printf("element %d has occured %d times\n",a[i],count);
}

}
int main()
{
int i,n,n1,j,a[10],count;
printf("enetr n value");
scanf("%d",&n);
for(i=0;i<n;i++)
{
scanf("%d",&a[i]);
}
if(n!=0)
occofall(a,n);
else
return '1'-48;

}

#include <stdio.h>
#include <string.h>

struct student
{
            int id;
            char name[20];

};

void structurefunc(struct student record);

int main()
{
            struct student geetanjali;

        geetanjali.id=1;
            strcpy(geetanjali.name, "geetanjali");

            structurefunc(geetanjali);
            return 0;
}

void func(struct student geetanjali)
{
            printf(" Id is: %d \n", geetanjali.id);
            printf(" Name is: %s \n", geetanjali.name);

        }
